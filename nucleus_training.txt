NUCLEUS TRAINING DEMO STEPS:

Jira Installation:

Step 1. Go to url
https://www.atlassian.com/software/jira/update and 
download the jira data centre installer for windows

Step 2. Locate the installer downloaded above, right click and Run as administrator.
You will be asked to enter reason and your login password few times during the installation.
Choose custom installation (2nd option)
Choose ports as jira: 8000 and control port: 8005 and click next (let other paths be default as it is) and install



Step 2. Once, the service is up and running
> Jira will be launched at http://localhost:8000 in a browser
> Choose, I'll setup by myself (for database setup)
> In next screen, select "Built-in" and click configure/next
> Now, copy the server ID and generate a trial license as per below instructions in next step.

Step 3. Generate trial license
Go to my.atlassian.com and log in with your Atlassian ID (Create one if no account exists).
From the list of Atlassian products, select Jira Software > Data Center. 
Fill out the form with your organization's name and server id from Step 2.
Select Generate license and copy this license text.

Step 4. Now, go back to the jira launch page and enter this license key and click Next

Step 5. Set up administrator account:
> Input admin as username and admin as password
> In email field, you can input your ncs email id and click Next

Step 6. Setup email notifications
Select Later and click Next

Now, wait for the final installation setup to be completed.

Step 7. Now, choose language and avatar and in next screen click on create new project by choosing any project type scrum/kanban/project management.. etc and click Next and now keyin the project name and key (must be unique) and clikc Submit.

Step 8.
Try out the following
a. Project/Issue Types/workflows/screens/field configurations etc
b. Create project
c. Create / update fields
d. Jira automation
e. Using Scrum(sprint)/Kanban board

CI/CD Pipeline setup:

Step 1. Download below 
> Java 11 - JDK 11.X (https://www.openlogic.com/openjdk-downloads)
> Maven - https://dlcdn.apache.org/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.zip
> Sonar-scanner - https://docs.sonarsource.com/sonarcloud/advanced-setup/ci-based-analysis/sonarscanner-cli/
> Jenkins - https://get.jenkins.io/war-stable/2.426.2/jenkins.war

Step 2. Installation
a. Java
Create a folder under your home directory "C:\Users\xxxx\JAVA\" and unzip the JDK 11.X downloaded in step 1.

b. Maven
Create a folder under your home directory "C:\Users\xxxx\MAVEN\" and unzip the Maven 3.X downloaded in step 1.

c. Sonar-scanner
Create folder under your home directory "C:\Users\xxxx\SONAR\" and unzip the Sonar-scanner 5.X downloaded in step 1.

d. Jenkins
Create folder under your home directory "C:\Users\xxxx\JENKINS\" and move the Jenkins 2.X.war file downloaded in step 1 to this location.
Now, 
> Navigate to "C:\Users\xxxx\JENKINS\"
> Open command prompt at this location or right click and select "Git Bash Here"
> In next window opened, type below command and start the Jenkins CI server
C:\Users\xxxx\JAVA\JDK11.X\bin\java -jar jenkins.war 
Note: The '\' in above path will be '/' if running from Git bash terminal
> Once started, you will Jenkins started or Jenkins is fully up and running message on the terminal
> Copy the secret printed on the terminal
> Open browser and type http://localhost:8080 and in the next screen paste the secrete copied above
> Once logged in, Click Install plugins preferred box and click "proceed" at the right bottom of the window.
> Create a user admin/admin or your own user when prompted (You need remember this user).

Step 3. Jenkins agent configurations
Go to Jenkins > Manage Jenkins > Nodes > Built-In Node > Add Environment Variables
key in all necessary key/values from the above jdk/maven/sonar-scanner installations as below:
JAVA_HOME
/c/Users/P1351949/JAVA/jdk-11.X

MAVEN_HOME
C:\Users\P1351949\MAVEN\apache-maven-3.9.6

SONARSCANNER_HOME
/c/Users/P1351949/SONAR/sonar-scanner-5.0.1

PATH
$JAVA_HOME/bin;$MAVEN_HOME/bin;$SONARSCANNER_HOME/bin;$PATH

Once added, click Save

Step 4. In Jenkins > Manage Jenkins > System > Shell > Shell Executable > Enter the full path of your "sh.exe" from screenshot shared on mail last week.

For example:
C:\Program Files\Git\bin\sh.exe 


Step 5. Create a Jenkins pipeline to verify if all installations are correct
Jenkins > New item > pipeline > Create
Write the pipeline code to print the java/maven and sonar-scanner version

ANALYSING SAMPLE MAVEN-SONARQUBE PROJECT

Step 6. Go to https://sonarcloud.io/ and Register for free trial
Once logged in,
> Click on Create project Manually (right of the screen) from Analyze project window
> Enter organization name, display name, project key and choose "Public" and click Next
> Copy the sonar token and project key from the subsequent page.

Step 7. In Jenkins > Manage Jenkins > Credentials > Add Credentials > choose secret text from the drop down and enter the sonar token obtained above in the secret text box and type "SONAR_TOKEN" in the ID and description field save.

Step 8. Go to pipeline syntax from your pipeline job created in Step 5.
> Choose git and enter git url "https://github.com/osandadeshan/sonarqube-maven-example.git" and click generate and copy/paste the code snippet to notepad.
> Choose withCredentials and select the "SONAR_TOKEN" from the dropdown and click generate and copy/paste the code snippet to notepad.

Step 9. Now, Go to the pipeline created in Step 5 and enter below command details to run the build, unit tests and sonar-scan for the maven project indicated in Step 8.

sh "export JAVA_HOME='/c/Users/XXXX/JAVA/jdk-11.X' && mvn verify sonar:sonar -Dsonar.organization=yyyy  -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=$PASSWORD -Dsonar.projectKey=xxxx-yyyy"

and click save (don't forget to include clear workspace step in post build actions)


Step 10. Trigger/Execute the build, monitor the console output and verify the sonar scan results published to the sonar url printed in the console.

Step 11. Upload/Publish the build artifacts/output to Artifactory (Jfrog)
a) Go to https://jfrog.com/ and register for free by entering unique domain name.

b) Once registered and logged in Click on Artifactory > Repositories
from the left pane.

c) In the next window, click on Create Repository > Select Local > select Maven >  Enter the repository key and click Create Local repository.

d) Now, we need to create a user/token to authenticate to this new jfrog repository. Go to Settings > User Management > Access Tokens > +Generate Token > Enter the username "admin" and click Generate.

e) In the next popup, copy the token and save it.

f) Now, save these authentication details in Jenkins credentials similar to Step 8. But, choose username and password from the credentials drop down, key in username as admin and password as the token copied above, description and ID filed as ARTIFACTORY.

g) Go to pipeline syntax > withCredentials and Select username and password Binding and select ARTIFACTORY and enter USERNAME and PASSWORD in username and password variable fields respectively and click generate. Copy/paste this cod snipper in notepad.

h) Now, prepare a curl command to POST/upload the build artifacts to the repository created in item c) above and it should look something like below
NOTE: Add a copy step before this command to copy the sonar-scanner jar build output from target folder to current directory/workspace.

curl -i -u$USERNAME:$PASSWORD -T sonarqube-maven-example-1.0-SNAPSHOT.jar 'https://domain_name.jfrog.io/artifactory/repository_key/$BUILD_NUMBER/'

NOTE: The domain_name is the one indicated in item a), repository_key in above url is the one indicated in item c) above and $USERNAME/$PASSWORD will be populated with values using item g) and $BUILD_NUMBER is the value obtained from Jenkins build number.

i) Now, prepare the code snippet using the above curl command and it should look something like this.
withCredentials([usernamePassword(credentialsId: 'ARTIFACTORY', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
curl -i -u$USERNAME:$PASSWORD -T sonarqube-maven-example-1.0-SNAPSHOT.jar 'https://domain_name.jfrog.io/artifactory/repository_key/$BUILD_NUMBER/'
}


Step 12. Now, update the above code snippet in the existing pipeline and trigger the build and monitor the status

Step 13. Once the build is successfull. Verify that the sonar-scanner....jar file is uploaded under repository_key/$BUILD_NUMBER/
